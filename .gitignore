## @AUTOR: Daniel Caro.
## @ORGANIZACION: Telmex.
## @DESCRIPCION: Crea una función denimada "makeCacheMatrix" y almacena una matriz en memoria.

makeCacheMatrix <- function(X = matrix()) {
inverso <- NULL
set <- function(Y){
	X <<- Y
	inverso <<- NULL
	}
get <- function() X
setinverso <- function(Inverse) inverso <<- Inverse
getinverso <- function() inverso
list(set=set,get=get,setinverso=setinverso,getinverso=getinverso)
}


## La función "cacheSolve" muestra el inverso de una matriz si se encuentra en la computadora, de ser así, mostrará su inversa.


cacheSolve <- function(X, ...){
inverso <- X$getinverso()

## Comprueba que efectivamente el cálculo esta en la memoria y regresará el inverso

if(!is.null(inverso)){
	message("La matriz está en la memoria")
	return(inverso)
	}

message(" El calculo inverso no esta en la mermoria, de existir, se calculará")

data <- X$get()
inverso <- pseudoinverse(data, ...)
X$setinverso(inverso)
inverso
}



## Pinta la matriz
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)

## Pinta la matriz
Y <- matrix(rpois(20,2), nrow = 5, ncol = 4)
cY <- makeCacheMatrix(Y)
cY$get()
cacheSolve(cY)
cacheSolve(cY)
invY <- cacheSolve(cY)


## Pinta la matriz
Z <- matrix(rpois(20,1), nrow = 4, ncol = 5)
cZ <- makeCacheMatrix(Z)
cZ$get()
cacheSolve(cZ)
cacheSolve(cZ)
invZ <- cacheSolve(cZ)

