## FUNCION CACHÉ MATRIX

makeCacheMatrix <- function(x = matrix()) {
	matriz <- NULL
        set <- function(y) {
                x <<- y
                matriz <<- NULL
        }
        get <- function() x
        setinv <- function(inv) matriz <<- inv
        getinv <- function() matriz
        list(set = set, get = get,
             setinv = setinv,
             getinv = getinv)
}

## Regresa los datos de la memoria caché, usa la inversa. Cargando...

cacheSolve <- function(x, ...) {        
	matriz <- x$getinv()
        if(!is.null(matriz)) {
                message("Obteniendo los datos de la memoria caché...")
                return(matriz)
        }
        data <- x$get()
        matriz <- solve(data, ...)
        x$setinv(matriz)
        matriz
}


X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)


Y <- matrix(rpois(20,2), nrow = 5, ncol = 4)
cY <- makeCacheMatrix(Y)
cY$get()
cacheSolve(cY)
cacheSolve(cY)
invY <- cacheSolve(cY)


Z <- matrix(rpois(20,1), nrow = 4, ncol = 5)
cZ <- makeCacheMatrix(Z)
cZ$get()
cacheSolve(cZ)
cacheSolve(cZ)
invZ <- cacheSolve(cZ)
